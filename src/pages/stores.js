import Head from 'next/head'
import { FaExternalLinkAlt } from 'react-icons/fa';

import Layout from '@components/Layout';
import Container from '@components/Container';
import Button from '@components/Button';
import {
  ApolloClient,
  InMemoryCache,
  gql
} from "@apollo/client/core";
import styles from '@styles/Page.module.scss'

export default function Stores({data}) {
  return (
    <Layout>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Container>
        <h1>Locations</h1>

        <div className={styles.stores}>

          <div className={styles.storesLocations}>
            <ul className={styles.locations}>
              {data.map((db)=>(
              <li key={db.id}>
                <p className={styles.locationName}>
                  {db.name}
                </p>
                <address>
                  {db.address}
                </address>
                <p>
                  {db.phoneNumber}
                </p>
                <p className={styles.locationDiscovery}>
                  <button>
                    View on Map
                  </button>
                  <a href="https://www.google.com/maps/" target="_blank" rel="noreferrer">
                    Get Directions
                    <FaExternalLinkAlt />
                  </a>
                </p>
              </li>
              ))}
            </ul>
          </div>

          <div className={styles.storesMap}>
            <div className={styles.storesMapContainer}>
              <div className={styles.map}>
                Map
              </div>
            </div>
          </div>
        </div>
      </Container>
    </Layout>
  )
}
export async function getStaticProps(){
  const client = new ApolloClient({
    uri: process.env.GRAPHQL_KEY,
    cache: new InMemoryCache()
  });
  const data = await client.query({
    query: gql`
     query PageStores {
      storeLocations{
       address
       phoneNumber
       name
       id
       location {
      latitude
      longitude
    }
     }
}`
});

  return{
     props:{
     data:data.data.storeLocations,
     }
  }
}